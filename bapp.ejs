<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Real-Time Bus Tracker</title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <link href="https://unpkg.com/tailwindcss@^1.0/dist/tailwind.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        /* [Your existing CSS remains unchanged] */
        #map {
            height: 100%;
            width: 100%;
            position: relative;
        }

        @import url('https://fonts.googleapis.com/css2?family=VT323&display=swap');

        body {
            background-color: #efdfdf;
            color: white;
            margin: 0;
            font-family: 'Karla', sans-serif;
            overflow-x: hidden;
            height: 100vh;
            padding: 0;
            overflow: hidden;
        }

        .back {
            background: #efdfdf;
            background-size: 400% 400%;
            animation: gradient 15s ease infinite;
            overflow: hidden;
            height: calc(100vh - 90px);
        }

        @keyframes gradient {
            0% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0% 50%; }
        }

        a {
            text-decoration: none;
            color: white;
        }

        h2 {
            font-weight: 100;
        }

        .sectop {
            margin-top: 6px;
            min-height: 300px;
            margin: 0;
            color: white;
            overflow: hidden;
            position: relative;
            height: 100%;
        }

        .leaflet-control-attribution {
            display: none;
        }

        .box {
            margin: auto;
            padding-top: 10px;
            padding-bottom: 20px;
            margin-top: -45px;
            margin-bottom: 15px;
            background-color: white;
            box-shadow: 5px 7px 12px black;
            border-radius: 14px;
            max-width: 90%;
            min-height: 100px;
            text-align: center;
            color: black;
            overflow: hidden;
        }

        .search {
            width: 400px;
            height: 40px;
            padding: 0 1rem;
            background: #e8e8e8;
            border-radius: 2%;
            transition: transform 0.1s ease-in-out;
        }

        .btn, .btn1 {
            margin: 2%;
            font-size: 15px;
            height: 40px;
            padding: 0px 40px;
            border: none;
            border-radius: 5px;
            background: #000000;
            color: white;
        }

        .btn:hover, .btn1:hover {
            background: #f5f5f5;
            color: #157efb;
        }

        .map-container {
            width: 100%;
            height: 100%;
            border-radius: 8px;
            box-shadow: 5px 7px 12px black;
            overflow: hidden;
            transition: all 0.3s ease;
            position: absolute;
            top: 0;
            left: 0;
        }

        .bus-label-container {
            display: block;
            text-align: center;
            pointer-events: none;
            transform: translate(-50%, -50%);
        }

        .bus-label {
            background: #ff6666;
            border: 1px solid #570047;
            padding: 1px 3px;
            font-size: 8px;
            font-weight: bold;
            text-align: center;
            border-radius: 2px;
            color: #000000;
            opacity: 1;
            transition: opacity 0.3s ease;
            width: 60px;
            display: inline-block;
            line-height: 10px;
        }

        .bus-label.checked {
            background: #00ff00;
        }

        .bus-label .bus-no {
            font-size: 6px;
        }

        .bus-dot {
            border-radius: 50%;
            pointer-events: none;
            box-shadow: 0 0 3px rgba(0, 0, 0, 0.5);
        }

        .stop-counter {
            width: 60px;
            height: 8px;
            background: #ccc;
            border-radius: 4px;
            margin-top: 2px;
            pointer-events: none;
            position: relative;
            overflow: hidden;
            border: 1px solid #666;
        }

        .stop-bar {
            height: 100%;
            background: #ff6666;
            transition: width 0.3s ease;
            border-radius: 3px 0 0 3px;
            position: relative;
        }

        .stop-bar.checked {
            background: #00ff00;
        }

        .stop-counter::after {
            content: '';
            position: absolute;
            right: -3px;
            top: 2px;
            width: 2px;
            height: 4px;
            background: #666;
            border-radius: 0 2px 2px 0;
        }

        .data {
            margin: 2% 2%;
            font-family: "VT323", monospace;
            font-weight: 400;
            font-style: normal;
            font-size: 11px;
            padding: 10px 10px;
            border: none;
            border-radius: 12px;
            text-align: left;
            background: #dde5e0;
            color: rgb(0, 0, 0);
        }

        .data:hover {
            background: #f5f5f5;
            color: #157efb;
        }

        .map-overlay {
            position: absolute;
            top: 10px;
            left: 10px;
            right: 10px;
            z-index: 1000;
            display: flex;
            gap: 10px;
            justify-content: space-between;
        }

        .map-overlay div {
            background-color: rgb(0, 0, 0);
            border-radius: 14px;
            padding: 5px 10px;
            font-size: 11px;
            font-weight: 600;
            color: white;
            border: white 2px solid;
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .map-overlay b {
            font-size: 8px;
            color: #eeff2d;
            font-weight: 400;
        }

        .map-overlay div svg {
            width: 20px;
            height: 20px;
        }

        .bottom-navbar {
            position: fixed;
            bottom: 0;
            left: 0;
            width: 100%;
            background: #000;
            color: white;
            border-top-left-radius: 15px;
            border-top-right-radius: 15px;
            transition: height 0.3s ease;
            z-index: 1000;
            overflow: hidden;
            box-shadow: 0 -2px 10px rgba(0, 0, 0, 0.5);
        }

        .bottom-navbar.collapsed {
            height: 90px;
        }

        .bottom-navbar.expanded {
            height: 450px;
            max-height: 450px;
            overflow-y: auto;
        }

        .navbar-toggle {
            width: 100%;
            height: 75px;
            background: #000;
            display: flex;
            justify-content: center;
            align-items: center;
            cursor: pointer;
            border-top-left-radius: 15px;
            border-top-right-radius: 15px;
        }

        .navbar-toggle svg {
            width: 28px;
            height: 28px;
        }

        .navbar-icons {
            display: flex;
            gap: 50px;
            justify-content: center;
            width: 100%;
        }

        .navbar-icon {
            width: 24px;
            height: 24px;
            cursor: pointer;
            transition: color 0.3s;
        }

        .navbar-icon:hover {
            color: #00d363;
        }

        .navbar-content {
            padding: 10px;
            display: flex;
            flex-direction: column;
            gap: 10px;
        }

        .bus-table {
            margin-top: 8px;
            width: 100%;
            border-collapse: collapse;
            color: white;
            background: #333;
            border-radius: 5px;
            overflow: hidden;
        }

        .bus-table th, .bus-table td {
            padding: 8px;
            text-align: left;
            border-bottom: 1px solid #555;
            font-size: 10px;
        }

        .bus-table th {
            background: #444;
        }

        .bus-table td input[type="checkbox"] {
            margin-right: 10px;
            width: 20px;
            height: 20px;
            appearance: none;
            border: 2px solid #fff;
            border-radius: 4px;
            cursor: pointer;
            position: relative;
        }

        .bus-table td input[type="checkbox"]:checked {
            background-color: #00ff00;
            border-color: #00ff00;
        }

        .bus-table td input[type="checkbox"]:checked::after {
            content: 'âœ”';
            position: absolute;
            color: #000;
            font-size: 14px;
            left: 50%;
            top: 50%;
            transform: translate(-50%, -50%);
        }

        .navbar-button {
            background: #2d2d2d;
            border: none;
            padding: 15px;
            border-radius: 10px;
            color: white;
            cursor: pointer;
            font-size: 16px;
            margin: 10px 0;
            display: flex;
            align-items: center;
            gap: 10px;
            justify-content: center;
            height: 100px;
        }

        .navbar-button:hover {
            background: #444;
        }

        .navbar-button svg {
            width: 20px;
            height: 20px;
        }

        .navbar-buttons {
            display: flex;
            gap: 10px;
            justify-content: space-between;
        }

        .navbar-search {
            width: 100%;
            height: 40px;
            padding: 0 1rem;
            background: #e8e8e8;
            border-radius: 10px;
            border: none;
            color: black;
            font-size: 14px;
            margin: 5px 0;
        }

        .navbar-search:focus {
            outline: none;
            background-color: #fff;
        }

        .analytics-button, .qr-button {
            position: fixed;
            right: 20px;
            width: 50px;
            height: 50px;
            background: #000000;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.5);
            z-index: 1001;
            border: #dde5e0 2px solid;
            transition: bottom 0.3s ease;
        }

        .bottom-navbar.collapsed ~ .analytics-button {
            bottom: 80px;
        }

        .bottom-navbar.collapsed ~ .qr-button {
            bottom: 140px;
        }

        .bottom-navbar.expanded ~ .analytics-button, .bottom-navbar.expanded ~ .qr-button {
            bottom: calc(450px + 20px);
        }

        .analytics-button svg, .qr-button svg {
            width: 24px;
            height: 24px;
            color: white;
        }

        .analysis-page, .challan-portal, .attendance-portal {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 400px;
            max-height: 80vh;
            background: #1a1a1a;
            color: white;
            z-index: 1002;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 0 20px rgba(0,0,0,0.5);
            overflow-y: auto;
        }

        .analysis-page.active, .challan-portal.active, .attendance-portal.active {
            display: block;
        }

        .close-btn {
            position: absolute;
            top: 10px;
            right: 10px;
            font-size: 24px;
            cursor: pointer;
        }

        #histogramCanvas, #navbarHistogram {
            max-width: 100%;
            height: 300px;
        }

        .analysis-page form, .challan-portal form, .attendance-portal form {
            display: flex;
            flex-direction: column;
            gap: 10px;
            margin-top: 20px;
        }

        .analysis-page input, .challan-portal input, .attendance-portal input, .attendance-portal select {
            padding: 8px;
            border-radius: 5px;
            border: 1px solid #555;
            background: #333;
            color: white;
        }

        .attendance-portal select {
            background: #2d2d2d;
            border: 2px solid #555;
            appearance: none;
            padding: 10px;
        }

        #attendanceForm select {
            padding: 10px;
            line-height: inherit;
            color: #000000;
        }

        .analysis-page input:focus, .challan-portal input:focus, .attendance-portal input:focus, .attendance-portal select:focus {
            outline: none;
            border-color: #00d363;
        }

        .qr-scanner-popup {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 300px;
            height: 300px;
            background: #fff;
            border-radius: 10px;
            box-shadow: 0 0 20px rgba(0,0,0,0.5);
            z-index: 10000;
            overflow: hidden;
        }

        .qr-scanner-popup.active {
            display: block;
        }

        #qr-video {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .qr-scan-line {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 2px;
            background: #00ff00;
            animation: scan 2s infinite linear;
        }

        @keyframes scan {
            0% { top: 0; }
            50% { top: calc(100% - 2px); }
            100% { top: 0; }
        }

        .bus-stop-icon svg {
            opacity: 1;
        }

        .user-location-icon svg {
            animation: pulse 1.5s infinite;
        }

        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.2); }
            100% { transform: scale(1); }
        }

        #checkModal {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: #fff;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 0 20px rgba(0,0,0,0.5);
            z-index: 10001;
            color: black;
            min-width: 80%;
        }

        #checkModal input[type="number"] {
            background: #f0f0f0;
            border: 1px solid #ccc;
            border-radius: 5px;
            padding: 8px;
            width: 100%;
            margin-bottom: 10px;
        }

        #checkModal form {
            display: flex;
            flex-direction: column;
            gap: 10px;
        }

        #checkModal .button-container {
            display: flex;
            gap: 10px;
            justify-content: center;
        }
    </style>
</head>

<body>
    <section class="back">
        <div class="sectop">
            <center>
                <div class="map-container">
                    <div id="map"></div>
                    <div class="map-overlay">
                        <div>
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" color="red" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-map-pin text-red-500"><path d="M20 10c0 4.993-5.539 10.193-7.399 11.799a1 1 0 0 1-1.202 0C9.539 20.193 4 14.993 4 10a8 8 0 0 1 16 0"></path><circle cx="12" cy="10" r="3"></circle></svg>
                            <span id="nearest-stop">Nearest Stop: Loading...</span>
                        </div>
                        <div>
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" color="blue" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-bus text-blue-500"><path d="M8 6v6"></path><path d="M15 6v6"></path><path d="M2 12h19.6"></path><path d="M18 18h3s.5-1.7.8-2.8c.1-.4.2-.8.2-1.2 0-.4-.1-.8-.2-1.2l-1.4-5C20.1 6.8 19.1 6 18 6H4a2 2 0 0 0-2 2v10h3"></path><circle cx="7" cy="18" r="2"></circle><path d="M9 18h5"></path><circle cx="16" cy="18" r="2"></circle></svg>
                            <span id="bus-arriving">Bus Arriving: Loading...</span>
                        </div>
                    </div>
                </div>
            </center>
        </div>
    </section>

    <div class="bottom-navbar collapsed" id="bottomNavbar">
        <div class="navbar-toggle" onclick="toggleNavbar()">
            <div class="navbar-icons">
                <svg xmlns="http://www.w3.org/2000/svg" class="navbar-icon lucide lucide-chevron-up" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="18 15 12 9 6 15"></polyline></svg>
                <svg xmlns="http://www.w3.org/2000/svg" class="navbar-icon lucide lucide-map-pin" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" onclick="goToUserLocation(); filterContent('location')"><path d="M20 10c0 4.993-5.539 10.193-7.399 11.799a1 1 0 0 1-1.202 0C9.539 20.193 4 14.993 4 10a8 8 0 0 1 16 0"></path><circle cx="12" cy="10" r="3"></circle></svg>
                <svg xmlns="http://www.w3.org/2000/svg" class="navbar-icon lucide lucide-bar-chart" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" onclick="toggleNavbar(); filterContent('analytics')"><path d="M3 3v18h18"></path><path d="M13 17h7"></path><path d="M13 12h7"></path><path d="M13 7h7"></path><path d="M3 12h8"></path><path d="M3 7h5"></path></svg>
                <svg xmlns="http://www.w3.org/2000/svg" class="navbar-icon lucide lucide-bus" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" onclick="toggleNavbar(); filterContent('scan')"><path d="M8 6v6"></path><path d="M15 6v6"></path><path d="M2 12h19.6"></path><path d="M18 18h3s.5-1.7.8-2.8c.1-.4.2-.8.2-1.2 0-.4-.1-.8-.2-1.2l-1.4-5C20.1 6.8 19.1 6 18 6H4a2 2 0 0 0-2 2v10h3"></path><circle cx="7" cy="18" r="2"></circle><path d="M9 18h5"></path><circle cx="16" cy="18" r="2"></circle></svg>
            </div>
        </div>
        <div class="navbar-content" id="navbarContent">
            <div id="busesContent" class="content-section" style="display: none;">
                <table class="bus-table" id="nearestBusesTable">
                    <thead>
                        <tr>
                            <th>Bus No</th>
                            <th>Route Name</th>
                            <th>Distance</th>
                            <th>Checked</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
                <div class="navbar-buttons">
                    <button class="navbar-button" onclick="showAttendancePortal()">
                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="#00aaff" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-user-check"><path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2"></path><circle cx="9" cy="7" r="4"></circle><polyline points="16 11 18 13 22 9"></polyline></svg>
                        Attendance
                    </button>
                    <button class="navbar-button" onclick="showChallanPortal()">
                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="#00ff00" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-file-text"><path d="M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z"></path><polyline points="14 2 14 8 20 8"></polyline><line x1="16" y1="13" x2="8" y2="13"></line><line x1="16" y1="17" x2="8" y2="17"></line><line x1="10" y1="9" x2="8" y2="9"></line></svg>
                        Bus Challan
                    </button>
                </div>
            </div>

            <div id="locationContent" class="content-section" style="display: none;">
                <input type="text" class="navbar-search" placeholder="Search locations..." />
                <div class="data">
                    <h3>Nearest Stop: Loading...</h3>
                    <h3>Nearest Buses: Loading...</h3>
                </div>
            </div>

            <div id="analyticsContent" class="content-section" style="display: none;">
                <canvas id="navbarHistogram" style="max-height: 200px;"></canvas>
                <div class="data">
                    <h3>Total Checks: 150</h3>
                    <h3>Collection: Rs5,000</h3>
                </div>
            </div>

            <div id="scanContent" class="content-section" style="display: none;">
                <button class="navbar-button" onclick="openQRScanner()">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-qr-code"><rect width="5" height="5" x="3" y="3" rx="1"></rect><rect width="5" height="5" x="16" y="3" rx="1"></rect><rect width="5" height="5" x="3" y="16" rx="1"></rect><path d="M21 16h-3a2 2 0 0 0-2 2v3"></path><path d="M21 21v.01"></path><path d="M12 7v3a2 2 0 0 1-2 2H7"></path><path d="M3 12h.01"></path><path d="M12 3h.01"></path><path d="M12 16v.01"></path><path d="M16 12h1"></path><path d="M21 12v.01"></path><path d="M12 21v-1"></path></svg>
                    Scan QR Code
                </button>
                <div class="data">
                    <h3>Last Scan: None</h3>
                </div>
            </div>
        </div>
    </div>

    <div class="analytics-button" onclick="showAnalysisPage()">
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-bar-chart"><path d="M3 3v18h18"></path><path d="M13 17h7"></path><path d="M13 12h7"></path><path d="M13 7h7"></path><path d="M3 12h8"></path><path d="M3 7h5"></path></svg>
    </div>

    <div class="qr-button" onclick="openQRScanner()">
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-qr-code"><rect width="5" height="5" x="3" y="3" rx="1"></rect><rect width="5" height="5" x="16" y="3" rx="1"></rect><rect width="5" height="5" x="3" y="16" rx="1"></rect><path d="M21 16h-3a2 2 0 0 0-2 2v3"></path><path d="M21 21v.01"></path><path d="M12 7v3a2 2 0 0 1-2 2H7"></path><path d="M3 12h.01"></path><path d="M12 3h.01"></path><path d="M12 16v.01"></path><path d="M16 12h1"></path><path d="M21 12v.01"></path><path d="M12 21v-1"></path></svg>
    </div>

    <div class="qr-scanner-popup" id="qrScannerPopup">
        <video id="qr-video"></video>
        <div class="qr-scan-line"></div>
        <span class="close-btn" onclick="closeQRScanner()">Ã—</span>
    </div>

    <div class="analysis-page" id="analysisPage">
        <span class="close-btn" onclick="hideAnalysisPage()">Ã—</span>
        <h2>Ticket Checker Analytics</h2>
        <p>Total Challan Collection: Rs5,000</p>
        <p>Buses Checked: 150</p>
        <canvas id="histogramCanvas"></canvas>
    </div>

    <div class="analysis-page" id="challanPortal">
        <span class="close-btn" onclick="hideChallanPortal()">Ã—</span>
        <h2>Bus Challan Portal</h2>
        <form id="challanForm">
            <label for="phoneNo">Phone Number:</label><br>
            <input type="tel" id="phoneNo" name="phoneNo" required><br>
            <label for="aadharNo">Aadhar Number:</label><br>
            <input type="text" id="aadharNo" name="aadharNo" required><br>
            <button type="submit" class="navbar-button">Submit Challan</button>
        </form>
    </div>

    <div class="analysis-page" id="attendancePortal">
        <span class="close-btn" onclick="hideAttendancePortal()">Ã—</span>
        <h2>Attendance Portal</h2>
        <form id="attendanceForm">
            <label for="nearbyBuses">Select Bus:</label><br>
            <select id="nearbyBuses" name="nearbyBuses" onchange="updateBusDetails()">
                <option value="">Select a bus</option>
            </select><br>
            <label for="busNo">Bus Number:</label><br>
            <input type="text" id="busNo" name="busNo" required><br>
            <label for="routeNo">Route No (Route Name):</label><br>
            <input type="text" id="routeNo" name="routeNo" required><br>
            <label for="conductorId">Conductor ID Number:</label><br>
            <input type="text" id="conductorId" name="conductorId" required><br>
            <label for="conductorWaiver">Conductor Waiver Number:</label><br>
            <input type="text" id="conductorWaiver" name="conductorWaiver" required><br>
            <button type="submit" class="navbar-button">Submit Attendance</button>
        </form>
    </div>

    <div id="checkModal">
        <h3>Bus Check Details</h3>
        <form id="checkForm">
            <input type="hidden" id="checkBusNo" name="busNo">
            <input type="hidden" id="checkRouteNo" name="routeNo">
            <label for="nonTicketHolders">Non-Ticket Holders:</label><br>
            <input type="number" id="nonTicketHolders" name="nonTicketHolders" min="0" required><br>
            <label for="fineCollected">Fine Collected (Rs):</label><br>
            <input type="number" id="fineCollected" name="fineCollected" min="0" step="1" required><br>
            <div class="button-container">
                <button type="submit" class="navbar-button">Submit</button>
                <button type="button" class="navbar-button" onclick="closeCheckModal()">Cancel</button>
            </div>
        </form>
    </div>

    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <script>
        const map = L.map('map', {
            center: [28.6139, 77.2090], // Default center (Delhi)
            zoom: 12,
            zoomControl: false
        });

        L.tileLayer('https://tile.jawg.io/jawg-streets/{z}/{x}/{y}{r}.png?access-token=yY3fr8FU86SQBCMHs2a8Fk3X3ef9sOjQ5yZspu3Bl16bSAjGC6dx4evddIDcMxG5', {
            attribution: '<a href="https://jawg.io" title="Tiles Courtesy of Jawg Maps" target="_blank">Â© <b>Jawg</b>Maps</a> Â© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
            minZoom: 0,
            maxZoom: 22
        }).addTo(map);

        document.addEventListener('DOMContentLoaded', () => {
            adjustMapHeight();
            map.invalidateSize();
            checkGeolocationPermission();
            
            const nonTicketHoldersInput = document.getElementById('nonTicketHolders');
            const fineCollectedInput = document.getElementById('fineCollected');
            nonTicketHoldersInput.addEventListener('input', function() {
                const nonTicketHolders = parseInt(this.value) || 0;
                const fineAmount = nonTicketHolders * 200;
                fineCollectedInput.value = fineAmount;
            });

            document.addEventListener('click', function(event) {
                const attendancePortal = document.getElementById('attendancePortal');
                const checkModal = document.getElementById('checkModal');

                if (attendancePortal.classList.contains('active') && 
                    !attendancePortal.contains(event.target) && 
                    !event.target.closest('.navbar-button')) {
                    hideAttendancePortal();
                }

                if (checkModal.style.display === 'block' && 
                    !checkModal.contains(event.target) && 
                    !event.target.closest('input[type="checkbox"]')) {
                    closeCheckModal();
                }
            });
        });

        const stopIcon = L.divIcon({
            className: 'bus-stop-icon',
            html: '<svg xmlns="http://www.w3.org/2000/svg" height="12" width="13.5" viewBox="0 0 576 512"><path fill="#1f13c3" d="M288 0C422.4 0 512 35.2 512 80l0 16 0 32c17.7 0 32 14.3 32 32l0 64c0 17.7-14.3 32-32 32l0 160c0 17.7-14.3 32-32 32l0 32c0 17.7-14.3 32-32 32l-32 0c-17.7 0-32-14.3-32-32l0-32-192 0 0 32c0 17.7-14.3 32-32 32l-32 0c-17.7 0-32-14.3-32-32l0-32c-17.7 0-32-14.3-32-32l0-160c-17.7 0-32-14.3-32-32l0-64c0-17.7 14.3-32 32-32c0 0 0 0 0 0l0-32s0 0 0 0l0-16C64 35.2 153.6 0 288 0zM128 160l0 96c0 17.7 14.3 32 32 32l112 0 0-160-112 0c-17.7 0-32 14.3-32 32zM304 288l112 0c17.7 0 32-14.3 32-32l0-96c0-17.7-14.3-32-32-32l-112 0 0 160zM144 400a32 32 0 1 0 0-64 32 32 0 1 0 0 64zm288 0a32 32 0 1 0 0-64 32 32 0 1 0 0 64zM384 80c0-8.8-7.2-16-16-16L208 64c-8.8 0-16 7.2-16 16s7.2 16 16 16l160 0c8.8 0 16-7.2 16-16z"/></svg>',
            iconSize: [25, 25],
            iconAnchor: [12.5, 25],
            popupAnchor: [0, -25]
        });

        const userIcon = L.divIcon({
            className: 'user-location-icon',
            html: '<svg xmlns="http://www.w3.org/2000/svg" width="15" height="15" viewBox="0 0 24 24" fill="none" stroke="#0000FF" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="5"></circle></svg>',
            iconSize: [35, 35],
            iconAnchor: [17.5, 17.5],
            popupAnchor: [0, 0]
        });

        let userMarker = null;
        const busMarkers = {};
        const stopCircles = {};
        let allBuses = [];
        const busStopMarkers = {};
        let currentFilter = 'all';
        let hasGeoPermission = false;
        const ZOOM_THRESHOLD = 14;
        const BUS_LABEL_SIZE = [60, 18];
        const updatingBuses = new Set();

        const initialBuses = <%- JSON.stringify(buses) %> || [];
        let initialBusStops = <%- JSON.stringify(busStops) %> || [];

        function calculateDistance(lat1, lon1, lat2, lon2) {
            const R = 6371;
            const dLat = (lat2 - lat1) * Math.PI / 180;
            const dLon = (lon2 - lon1) * Math.PI / 180;
            const a = Math.sin(dLat/2) * Math.sin(dLat/2) +
                Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * 
                Math.sin(dLon/2) * Math.sin(dLon/2);
            const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
            return R * c;
        }

        function findNearestLocations(userLat, userLon, buses, stops) {
            const stopsWithDistance = stops.map(stop => ({
                ...stop,
                distance: calculateDistance(userLat, userLon, stop.latitude, stop.longitude)
            })).sort((a, b) => a.distance - b.distance);

            const busesWithDistance = buses.map(bus => ({
                ...bus,
                distance: calculateDistance(userLat, userLon, bus.latitude, bus.longitude)
            })).sort((a, b) => a.distance - b.distance);

            return {
                nearestStop: stopsWithDistance[0] || { name: 'Unknown', distance: 0 },
                nearestBuses: busesWithDistance.slice(0, 4),
                nearbyStops: stopsWithDistance.slice(0, 3)
            };
        }

        function updateNearestDisplay(nearestStop, nearestBuses, nearbyStops) {
            const displayElement = document.querySelector('#locationContent .data');
            let html = `
                <h3>Nearest Stop: ${nearestStop.name}</h3>
                <p>Distance: ${nearestStop.distance.toFixed(2)} km</p>
                <h3>Nearest Buses:</h3>
                <ul style="list-style: none; padding: 0;">
            `;
            
            nearestBuses.forEach(bus => {
                html += `
                    <li>
                        Bus ${bus.busNo} (Route: ${bus.routeName})<br>
                        Distance: ${bus.distance.toFixed(2)} km
                    </li>
                `;
            });
            
            html += '</ul>';
            displayElement.innerHTML = html;

            document.getElementById('nearest-stop').innerHTML = `Nearest Stop<b> ${nearestStop.name} (${(nearestStop.distance * 1000).toFixed(0)}m)</b>`;
            if (nearestBuses.length > 0) {
                document.getElementById('bus-arriving').innerHTML = `Bus <b>${nearestBuses[0].busNo} (${nearestBuses[0].routeName})</b>`;
            } else {
                document.getElementById('bus-arriving').innerText = `Bus Arriving: None`;
            }

            if (currentFilter === 'buses') {
                const tableBody = document.querySelector('#nearestBusesTable tbody');
                tableBody.innerHTML = '';
                nearestBuses.forEach(bus => {
                    if (bus.busNo) {
                        const row = document.createElement('tr');
                        row.innerHTML = `
                            <td>${bus.busNo}</td>
                            <td>${bus.routeName}</td>
                            <td>${bus.distance.toFixed(2)} km</td>
                            <td class="check-cell" data-bus-no="${bus.busNo}">
                                ${updatingBuses.has(bus.busNo) ? 'Updating...' : `<input type="checkbox" ${bus.checked ? 'checked' : ''} onchange="handleCheck('${bus.busNo}', this.checked, '${bus.routeNo}')">`}
                            </td>
                        `;
                        tableBody.appendChild(row);
                    }
                });
            }
        }

        function handleCheck(busNo, checked, routeNo) {
            if (checked) {
                showCheckModal(busNo, routeNo);
            }
        }

        function showCheckModal(busNo, routeNo) {
            document.getElementById('checkBusNo').value = busNo;
            document.getElementById('checkRouteNo').value = routeNo;
            document.getElementById('nonTicketHolders').value = '';
            document.getElementById('fineCollected').value = '';
            document.getElementById('checkModal').style.display = 'block';
        }

        function closeCheckModal() {
            document.getElementById('checkModal').style.display = 'none';
        }

        document.getElementById('checkForm').onsubmit = async function(e) {
            e.preventDefault();
            const busNo = document.getElementById('checkBusNo').value;
            const routeNo = document.getElementById('checkRouteNo').value;
            const nonTicketHolders = parseInt(document.getElementById('nonTicketHolders').value) || 0;
            const fineCollected = parseInt(document.getElementById('fineCollected').value) || 0;

            const payload = { busNo, routeNo, nonTicketHolders, fineCollected };
            console.log('Submitting check data:', payload);

            closeCheckModal();
            updatingBuses.add(busNo);
            updateNearestDisplay(
                findNearestLocations(
                    userMarker ? userMarker.getLatLng().lat : 28.6139,
                    userMarker ? userMarker.getLatLng().lng : 77.2090,
                    allBuses,
                    initialBusStops
                ).nearestStop,
                allBuses.map(bus => ({
                    ...bus,
                    distance: calculateDistance(
                        userMarker ? userMarker.getLatLng().lat : 28.6139,
                        userMarker ? userMarker.getLatLng().lng : 77.2090,
                        bus.latitude,
                        bus.longitude
                    )
                })).sort((a, b) => a.distance - b.distance).slice(0, 4),
                initialBusStops.slice(0, 3)
            );

            const baseUrl = window.location.hostname === 'localhost' ? 'http://localhost:3000' : 'https://bus-19wu.onrender.com';
            try {
                const response = await fetch(`${baseUrl}/api/checkBus`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload),
                    credentials: 'include'
                });

                if (!response.ok) {
                    const errorText = await response.text();
                    throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`);
                }

                const result = await response.json();
                console.log('Server response:', result);

                if (result.success) {
                    updatingBuses.delete(busNo);
                    updateNearestDisplay(
                        findNearestLocations(
                            userMarker ? userMarker.getLatLng().lat : 28.6139,
                            userMarker ? userMarker.getLatLng().lng : 77.2090,
                            allBuses,
                            initialBusStops
                        ).nearestStop,
                        allBuses.map(bus => ({
                            ...bus,
                            distance: calculateDistance(
                                userMarker ? userMarker.getLatLng().lat : 28.6139,
                                userMarker ? userMarker.getLatLng().lng : 77.2090,
                                bus.latitude,
                                bus.longitude
                            )
                        })).sort((a, b) => a.distance - b.distance).slice(0, 4),
                        initialBusStops.slice(0, 3)
                    );
                    console.log('Bus check submitted successfully!');
                } else {
                    console.error('Error updating bus check:', result.error);
                    console.log('Error updating bus check: ' + result.error);
                    updatingBuses.delete(busNo);
                    const busIndex = allBuses.findIndex(b => b.busNo === busNo);
                    if (busIndex !== -1) {
                        allBuses[busIndex].checked = false;
                        updateBusMarkers(allBuses, initialBusStops);
                    }
                }
            } catch (err) {
                console.error('Fetch error:', err);
                alert('Error: ' + err.message);
                updatingBuses.delete(busNo);
                const busIndex = allBuses.findIndex(b => b.busNo === busNo);
                if (busIndex !== -1) {
                    allBuses[busIndex].checked = false;
                    updateBusMarkers(allBuses, initialBusStops);
                }
            }
        };

        function generateStopCounter(stopsRemaining, checked) {
            const percentage = (stopsRemaining / 10) * 100;
            return `
                <div class="stop-counter">
                    <div class="stop-bar ${checked ? 'checked' : ''}" style="width: ${percentage}%"></div>
                </div>
            `;
        }

        function adjustMarkerOpacity(zoom) {
            const opacity = zoom > 16 ? 1 : zoom > 11 ? 0.9 : 0.4;
            Object.values(busMarkers).forEach(marker => {
                const element = marker.getElement();
                if (element && element.classList.contains('bus-label')) {
                    element.style.opacity = opacity;
                }
            });
        }

        function filterBusesInBounds(buses) {
            const bounds = map.getBounds();
            return buses.filter(bus => bounds.contains([bus.latitude, bus.longitude]));
        }

        function updateBusMarkers(buses, stops) {
            allBuses = buses;
            const visibleBuses = filterBusesInBounds(buses);
            const zoomLevel = map.getZoom();
            const useLabels = zoomLevel >= ZOOM_THRESHOLD;

            Object.keys(busMarkers).forEach(busNo => {
                if (!visibleBuses.find(bus => bus.busNo === busNo)) {
                    map.removeLayer(busMarkers[busNo]);
                    if (stopCircles[busNo]) {
                        map.removeLayer(stopCircles[busNo]);
                        delete stopCircles[busNo];
                    }
                    delete busMarkers[busNo];
                }
            });

            visibleBuses.forEach(bus => {
                const { busNo, latitude, longitude, routeNo, routeName, checked, stopsRemaining = 0 } = bus;

                const nearbyStop = stops.find(stop => 
                    calculateDistance(latitude, longitude, stop.latitude, stop.longitude) < 0.05
                );

                const counterHtml = generateStopCounter(stopsRemaining, checked);
                const busDotIcon = L.divIcon({
                    className: 'bus-dot',
                    html: `<div style="width: 10px; height: 10px; background: ${checked ? '#00ff00' : '#ff6666'}; border-radius: 50%;"></div>`,
                    iconSize: [10, 10],
                    iconAnchor: [5, 5]
                });

                if (busMarkers[busNo]) {
                    const marker = busMarkers[busNo];
                    const newLatLng = new L.LatLng(latitude, longitude);
                    animateMarker(marker, marker.getLatLng(), newLatLng);
                    if (useLabels) {
                        marker.setIcon(L.divIcon({
                            className: 'bus-label-container',
                            html: `<div class="bus-label ${checked ? 'checked' : ''}">${routeName} (<span class="bus-no">${busNo}</span>)</div>${counterHtml}`,
                            iconSize: BUS_LABEL_SIZE,
                            iconAnchor: [BUS_LABEL_SIZE[0] / 2, BUS_LABEL_SIZE[1] / 2]
                        }));
                    } else {
                        marker.setIcon(busDotIcon);
                    }
                    marker.setPopupContent(`Bus: ${busNo}<br>Route: ${routeName}<br>Lat: ${latitude}<br>Lon: ${longitude}<br>Stops Remaining: ${stopsRemaining}`);
                } else {
                    const icon = useLabels ? L.divIcon({
                        className: 'bus-label-container',
                        html: `<div class="bus-label ${checked ? 'checked' : ''}">${routeName} (<span class="bus-no">${busNo}</span>)</div>${counterHtml}`,
                        iconSize: BUS_LABEL_SIZE,
                        iconAnchor: [BUS_LABEL_SIZE[0] / 2, BUS_LABEL_SIZE[1] / 2]
                    }) : busDotIcon;

                    const marker = L.marker([latitude, longitude], { icon })
                        .addTo(map)
                        .bindPopup(`Bus: ${busNo}<br>Route: ${routeName}<br>Lat: ${latitude}<br>Lon: ${longitude}<br>Stops Remaining: ${stopsRemaining}`);

                    busMarkers[busNo] = marker;
                }

                if (nearbyStop) {
                    if (!stopCircles[busNo]) {
                        stopCircles[busNo] = L.circle([latitude, longitude], {
                            radius: 50,
                            color: 'rgba(11, 197, 8, 0.24)',
                            fillColor: 'rgba(11, 197, 8, 1)',
                            fillOpacity: 0.3
                        }).addTo(map);
                    } else {
                        stopCircles[busNo].setLatLng([latitude, longitude]);
                    }
                } else if (stopCircles[busNo]) {
                    map.removeLayer(stopCircles[busNo]);
                    delete stopCircles[busNo];
                }
            });

            if (useLabels) {
                adjustMarkerOpacity(zoomLevel);
            }
        }

        function updateBusStopMarkers(stops) {
            const zoomLevel = map.getZoom();
            const bounds = map.getBounds();

            if (zoomLevel < ZOOM_THRESHOLD) {
                Object.keys(busStopMarkers).forEach(key => {
                    map.removeLayer(busStopMarkers[key]);
                    delete busStopMarkers[key];
                });
                return;
            }

            if (stops && stops.length > 0) {
                stops.forEach(stop => {
                    const { name, latitude, longitude } = stop;
                    const key = `${latitude},${longitude}`;

                    if (bounds.contains([latitude, longitude])) {
                        if (!busStopMarkers[key]) {
                            const marker = L.marker([latitude, longitude], { icon: stopIcon })
                                .addTo(map)
                                .bindPopup(`Stop: ${name}<br>Lat: ${latitude}<br>Lon: ${longitude}`);
                            busStopMarkers[key] = marker;
                        }
                    } else if (busStopMarkers[key]) {
                        map.removeLayer(busStopMarkers[key]);
                        delete busStopMarkers[key];
                    }
                });
                initialBusStops = stops;
            }
        }

        function animateMarker(marker, startLatLng, endLatLng) {
            let startTime = null;
            const duration = 1000;

            function animate(timestamp) {
                if (!startTime) startTime = timestamp;
                const progress = (timestamp - startTime) / duration;
                if (progress < 1) {
                    const lat = startLatLng.lat + (endLatLng.lat - startLatLng.lat) * progress;
                    const lng = startLatLng.lng + (endLatLng.lng - startLatLng.lng) * progress;
                    marker.setLatLng([lat, lng]);
                    if (stopCircles[marker._popup._content.split('<br>')[0].replace('Bus: ', '')]) {
                        stopCircles[marker._popup._content.split('<br>')[0].replace('Bus: ', '')].setLatLng([lat, lng]);
                    }
                    requestAnimationFrame(animate);
                } else {
                    marker.setLatLng(endLatLng);
                }
            }
            requestAnimationFrame(animate);
        }

        function adjustMapHeight() {
            const navbar = document.getElementById('bottomNavbar');
            const backSection = document.querySelector('.back');
            const navbarHeight = navbar.classList.contains('collapsed') ? 90 : 450;
            backSection.style.height = `calc(100vh - ${navbarHeight}px)`;
            map.invalidateSize();
        }

        function toggleNavbar() {
            const navbar = document.getElementById('bottomNavbar');
            const analyticsBtn = document.querySelector('.analytics-button');
            const qrBtn = document.querySelector('.qr-button');
            const arrowIcon = document.querySelector('.lucide-chevron-up');

            if (navbar.classList.contains('collapsed')) {
                navbar.classList.remove('collapsed');
                navbar.classList.add('expanded');
                analyticsBtn.style.bottom = '470px';
                qrBtn.style.bottom = '530px';
                arrowIcon.innerHTML = '<polyline points="18 9 12 15 6 9"></polyline>';
                filterContent('buses');
            } else {
                navbar.classList.remove('expanded');
                navbar.classList.add('collapsed');
                analyticsBtn.style.bottom = '80px';
                qrBtn.style.bottom = '140px';
                arrowIcon.innerHTML = '<polyline points="18 15 12 9 6 15"></polyline>';
            }
            adjustMapHeight();
        }

        function showAnalysisPage() {
            const analysisPage = document.getElementById('analysisPage');
            analysisPage.classList.add('active');
            drawHistogram();
        }

        function hideAnalysisPage() {
            const analysisPage = document.getElementById('analysisPage');
            analysisPage.classList.remove('active');
        }

        async function openQRScanner() {
            const qrScannerPopup = document.getElementById('qrScannerPopup');
            const videoElement = document.getElementById('qr-video');

            try {
                const stream = await navigator.mediaDevices.getUserMedia({
                    video: { facingMode: 'environment' }
                });
                
                videoElement.srcObject = stream;
                videoElement.play();
                qrScannerPopup.classList.add('active');
                
                setTimeout(() => {
                    closeQRScanner();
                }, 4000);
            } catch (err) {
                console.error('Camera access error:', err);
                alert('Failed to access camera. Please allow camera permissions.');
            }
        }

        function closeQRScanner() {
            const qrScannerPopup = document.getElementById('qrScannerPopup');
            const videoElement = document.getElementById('qr-video');
            const stream = videoElement.srcObject;
            
            if (stream) {
                stream.getTracks().forEach(track => track.stop());
                videoElement.srcObject = null;
            }
            qrScannerPopup.classList.remove('active');
        }

        function filterContent(type) {
            currentFilter = type;
            const contentSections = document.querySelectorAll('.content-section');
            contentSections.forEach(section => section.style.display = 'none');
            
            switch(type) {
                case 'buses':
                    document.getElementById('busesContent').style.display = 'block';
                    if (userMarker && hasGeoPermission) {
                        const userLatLng = userMarker.getLatLng();
                        const nearest = findNearestLocations(userLatLng.lat, userLatLng.lng, allBuses, initialBusStops);
                        updateNearestDisplay(nearest.nearestStop, nearest.nearestBuses, nearest.nearbyStops);
                    }
                    break;
                case 'location':
                    document.getElementById('locationContent').style.display = 'block';
                    if (userMarker && hasGeoPermission) {
                        const userLatLng = userMarker.getLatLng();
                        const nearest = findNearestLocations(userLatLng.lat, userLatLng.lng, allBuses, initialBusStops);
                        updateNearestDisplay(nearest.nearestStop, nearest.nearestBuses, nearest.nearbyStops);
                    }
                    break;
                case 'analytics':
                    document.getElementById('analyticsContent').style.display = 'block';
                    drawNavbarHistogram();
                    break;
                case 'scan':
                    document.getElementById('scanContent').style.display = 'block';
                    break;
            }
            
            const navbar = document.getElementById('bottomNavbar');
            if (navbar.classList.contains('collapsed')) {
                toggleNavbar();
            }
        }

        function drawHistogram() {
            const ctx = document.getElementById('histogramCanvas').getContext('2d');
            if (window.myHistogram) window.myHistogram.destroy();

            const timeSlots = ['00:00-04:00', '04:00-08:00', '08:00-12:00', '12:00-16:00', '16:00-20:00', '20:00-24:00'];
            const collections = [200, 500, 1200, 1500, 900, 700];

            window.myHistogram = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: timeSlots,
                    datasets: [{
                        label: 'Challan Collection (Rs)',
                        data: collections,
                        backgroundColor: 'rgba(0, 211, 99, 0.6)',
                        borderColor: 'rgba(0, 211, 99, 1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    scales: {
                        y: { beginAtZero: true, title: { display: true, text: 'Collection (Rs)' } },
                        x: { title: { display: true, text: 'Time of Day' } }
                    },
                    plugins: { legend: { labels: { color: 'white' } } }
                }
            });
        }

        function drawNavbarHistogram() {
            const ctx = document.getElementById('navbarHistogram').getContext('2d');
            if (window.navbarHistogram) window.navbarHistogram.destroy();

            const timeSlots = ['00-04', '04-08', '08-12', '12-16', '16-20', '20-24'];
            const collections = [200, 500, 1200, 1500, 900, 700];

            window.navbarHistogram = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: timeSlots,
                    datasets: [{
                        label: 'Checks',
                        data: collections,
                        backgroundColor: 'rgba(0, 211, 99, 0.6)',
                        borderColor: 'rgba(0, 211, 99, 1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    scales: {
                        y: { beginAtZero: true, title: { display: true, text: 'Checks' } },
                        x: { title: { display: true, text: 'Time' } }
                    },
                    plugins: { legend: { labels: { color: 'white' } } }
                }
            });
        }

        function showChallanPortal() {
            const challanPortal = document.getElementById('challanPortal');
            challanPortal.classList.add('active');
        }

        function hideChallanPortal() {
            const challanPortal = document.getElementById('challanPortal');
            challanPortal.classList.remove('active');
        }

        function showAttendancePortal() {
            const attendancePortal = document.getElementById('attendancePortal');
            attendancePortal.classList.add('active');
            
            if (userMarker && hasGeoPermission) {
                const userLatLng = userMarker.getLatLng();
                const nearest = findNearestLocations(userLatLng.lat, userLatLng.lng, allBuses, initialBusStops);
                populateNearbyBuses(nearest.nearestBuses);
            } else {
                populateNearbyBuses([]);
            }
        }

        function hideAttendancePortal() {
            const attendancePortal = document.getElementById('attendancePortal');
            attendancePortal.classList.remove('active');
        }

        function populateNearbyBuses(nearbyBuses) {
            const select = document.getElementById('nearbyBuses');
            select.innerHTML = '<option value="">Select a bus</option>';
            
            nearbyBuses.forEach(bus => {
                const option = document.createElement('option');
                option.value = `${bus.busNo}|${bus.routeNo}|${bus.routeName}`;
                option.text = `Bus ${bus.busNo} - ${bus.routeName} (${bus.distance.toFixed(2)} km)`;
                select.appendChild(option);
            });

            if (nearbyBuses.length > 0) {
                select.value = `${nearbyBuses[0].busNo}|${nearbyBuses[0].routeNo}|${nearbyBuses[0].routeName}`;
                updateBusDetails();
            }
        }

        function updateBusDetails() {
            const select = document.getElementById('nearbyBuses');
            const [busNo, routeNo, routeName] = select.value.split('|');
            
            if (busNo && routeNo && routeName) {
                document.getElementById('busNo').value = busNo;
                document.getElementById('routeNo').value = `${routeNo} (${routeName})`;
            } else {
                document.getElementById('busNo').value = '';
                document.getElementById('routeNo').value = '';
            }
        }

        document.getElementById('challanForm').onsubmit = function(e) {
            e.preventDefault();
            const phoneNo = document.getElementById('phoneNo').value;
            const aadharNo = document.getElementById('aadharNo').value;
            console.log(`Challan submitted for Phone: ${phoneNo}, Aadhar: ${aadharNo}`);
            hideChallanPortal();
        };

        document.getElementById('attendanceForm').onsubmit = async function(e) {
            e.preventDefault();
            const busNo = document.getElementById('busNo').value;
            const routeNo = document.getElementById('routeNo').value.split(' (')[0];
            const conductorId = document.getElementById('conductorId').value;
            const conductorWaiver = document.getElementById('conductorWaiver').value;
            
            const baseUrl = window.location.hostname === 'localhost' ? 'http://localhost:3000' : 'https://bus-19wu.onrender.com';
            try {
                const response = await fetch(`${baseUrl}/api/recordAttendance`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ 
                        busNo, 
                        routeNo, 
                        conductorId, 
                        conductorWaiver 
                    })
                });

                const result = await response.json();
                if (result.success) {
                    console.log('Attendance recorded successfully!');
                    hideAttendancePortal();
                } else {
                    alert('Error recording attendance: ' + result.error);
                }
            } catch (err) {
                console.error('Error recording attendance:', err);
                alert('Error: ' + err.message);
            }
        };

        function goToUserLocation(attempt = 1, maxAttempts = 3) {
            if (!navigator.geolocation) {
                console.error('Geolocation is not supported by your browser.');
                console.log('Geolocation is not supported by your browser.');
                return;
            }

            navigator.geolocation.getCurrentPosition(
                position => {
                    const lat = position.coords.latitude;
                    const lon = position.coords.longitude;

                    if (!userMarker) {
                        userMarker = L.marker([lat, lon], { icon: userIcon }).addTo(map);
                    } else {
                        userMarker.setLatLng([lat, lon]);
                    }
                    map.setView([lat, lon], 15);

                    hasGeoPermission = true;
                    const nearest = findNearestLocations(lat, lon, allBuses, initialBusStops);
                    updateNearestDisplay(nearest.nearestStop, nearest.nearestBuses, nearest.nearbyStops);
                    console.log('Geolocation success:', { lat, lon });
                },
                error => {
                    console.error('Geolocation error:', error);
                    if (attempt <= maxAttempts) {
                        switch (error.code) {
                            case error.PERMISSION_DENIED:
                                console.log('Location permission denied. Attempt:', attempt);
                                hasGeoPermission = false;
                                if (attempt === maxAttempts) {
                                    console.log('Location permission denied. Please enable it in your browser settings.');
                                }
                                break;
                            case error.POSITION_UNAVAILABLE:
                                console.log('Location information is unavailable. Attempt:', attempt);
                                if (attempt === maxAttempts) {
                                    console.log('Location information is unavailable. Please try again later.');
                                }
                                break;
                            case error.TIMEOUT:
                                console.log('Location request timed out. Retrying... Attempt:', attempt);
                                if (attempt < maxAttempts) {
                                    setTimeout(() => goToUserLocation(attempt + 1, maxAttempts), 2000); // Retry after 2 seconds
                                }
                                break;
                            default:
                                console.log('Unknown geolocation error. Attempt:', attempt);
                                if (attempt < maxAttempts) {
                                    setTimeout(() => goToUserLocation(attempt + 1, maxAttempts), 2000); // Retry after 2 seconds
                                } else {
                                    console.log('Failed to get your location after multiple attempts. Please check your device settings or try again later.');
                                }
                                break;
                        }
                    }
                },
                { timeout: 10000, maximumAge: 0, enableHighAccuracy: true }
            );
        }

        function checkGeolocationPermission() {
            if (navigator.permissions) {
                navigator.permissions.query({ name: 'geolocation' }).then(result => {
                    if (result.state === 'granted') {
                        hasGeoPermission = true;
                        goToUserLocation();
                    } else if (result.state === 'prompt') {
                        goToUserLocation();
                    } else {
                        hasGeoPermission = false;
                        console.log('Geolocation permission denied.');
                        goToUserLocation(); // Attempt to prompt user
                    }
                    result.onchange = () => {
                        hasGeoPermission = result.state === 'granted';
                        if (hasGeoPermission) goToUserLocation();
                    };
                }).catch(err => {
                    console.error('Permissions API error:', err);
                    goToUserLocation();
                });
            } else {
                goToUserLocation();
            }
        }

        const socket = io();
        socket.on('connect', () => {
            console.log('Connected to server');
            map.on('zoomend', () => socket.emit('zoomLevel', map.getZoom()));
            socket.emit('zoomLevel', map.getZoom());
        });

        socket.on('busUpdate', data => {
            console.log('Received bus update:', data);
            updateBusMarkers(data.buses, initialBusStops);
            if (data.busStops && data.busStops.length > 0) {
                updateBusStopMarkers(data.busStops);
            }
            if (userMarker && hasGeoPermission) {
                const userLatLng = userMarker.getLatLng();
                const nearest = findNearestLocations(userLatLng.lat, userLatLng.lng, data.buses, initialBusStops);
                updateNearestDisplay(nearest.nearestStop, nearest.nearestBuses, nearest.nearbyStops);
            }
        });

        updateBusMarkers(initialBuses, initialBusStops);
        if (initialBusStops.length > 0 && map.getZoom() >= ZOOM_THRESHOLD) {
            updateBusStopMarkers(initialBusStops);
        }
    </script>
</body>
</html>
